% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_year.R
\name{extract_year}
\alias{extract_year}
\title{\code{extract_year()}}
\usage{
extract_year(
  dates,
  expect_modern = TRUE,
  if_multiple = "last",
  return_numeric = FALSE
)
}
\arguments{
\item{dates}{A vector containing one or more dates from which to extract years. Date or character class.}

\item{expect_modern}{Only extract 19XY and 20XY years? \code{TRUE} or \code{FALSE}; \code{TRUE} is default.}

\item{if_multiple}{If multiple year candidates are detected in a string, which should be returned, the first or the last?
\code{'first'} or \code{'last'}, case-insensitive; \code{'last'} is default.}

\item{return_numeric}{If \code{FALSE}, years are returned as character strings; if \code{TRUE}, years are returned as numeric values.}
}
\value{
A character vector.
}
\description{
Extracts four-digit years from dates.
}
\details{
\code{extract_year()} extracts four-digit years from dates stored in a vector.
Dates in the vector can be character or Date class, so long as a four-digit year is present somewhere in them.
If multiple candidate years are identified for a given date, the \code{if_multiple} argument governs which is returned,
the first or the last (the last is the default). The \code{expect_modern} argument determines whether to extract only
years in the 20th and 21st centuries.
}
\examples{
dates <- c('01/01/1950', '01-01-1950',
           '2020-01-01', '2020/01/01',
           'Date: 2000-11-11', 'ABC 12-12-1999 XYZ')
extract_year(dates, expect_modern = TRUE, if_multiple = 'last')

}
